input AMPLIFY {
  globalAuthRule: AuthRule = { allow: public }
}

type Mutation {
  sendChatMessage(userId: ID!, currentProfile: AWSJSON!, message: String!): String @function(name: "createAiMessage-${env}")
}

type Profile
  @model
  @auth(
    rules: [
      { allow: public, provider: apiKey }
      { allow: owner, ownerField: "id", provider: userPools }
    ]
  ) {
  id: ID!
  name: String!
  email: String!
  bio: String
  contactInfo: String
  profileImage: String
  matches: [Match!]! @manyToMany(relationName: "ProfilesToMatches")
  messages: [Message!]! @hasMany(indexName: "byProfile", fields: ["id"])
  traits: AWSJSON
}

type Match
  @model
  @auth(
    rules: [
      { allow: public, provider: apiKey }
      { allow: private, operations: [read], provider: userPools }
    ]
  ) {
  id: ID!
  profiles: [Profile!]! @manyToMany(relationName: "ProfilesToMatches")
}

enum SenderType {
  USER
  AI
}

type Message
  @model
  @auth(
    rules: [
      { allow: public, provider: apiKey }
      { allow: owner, operations: [read], ownerField: "profileId", provider: userPools }
    ]
  ) {
  id: ID! 
  profileId: ID! @index(name: "byProfile", sortKeyFields: ["createdAt"])
  profile: Profile @belongsTo(fields: ["profileId"])
  content: String!
  sender: SenderType!
  metadata: AWSJSON
  createdAt: AWSDateTime!
}
